
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 baked.gltf 
*/

// import React, { useRef } from 'react'
import { useGLTF, useTexture } from '@react-three/drei'
import * as THREE from 'three'
import { Mesh } from 'three';
import { GLTF } from 'three';
import { GroupProps } from '@react-three/fiber';


// 定义GLTFResult接口，根据你的GLTF结构进行调整
interface GLTFResult extends GLTF {
  nodes: {
    [name: string]: Mesh;
  };
}

export default function RoomScene(props: GroupProps) {
  // load贴图文件
  const texture = useTexture('/Baked.png')
  // blender导出的时候默认flipY，可能导致mapping不正确，这里给他反回来
  texture.flipY = false;
  // texture.encoding = THREE.sRGBEncoding;//我也不知道有什么用
  // 将读取的贴图赋值给材质变量
  const textureMaterial = new THREE.MeshStandardMaterial({
    map: texture,
  });
  // load模型文件
  const {
    nodes,
    // materials
  } = useGLTF('/baked.gltf') as unknown as GLTFResult;
  return (
    <group {...props} dispose={null}>
      <group name="RootNode" position={[-0.812, 0, 1.105]}>
        <mesh name="Cube" geometry={nodes.Cube.geometry} material={textureMaterial} rotation={[-Math.PI / 2, 0, 0]} />
        <mesh name="Icosphere003" geometry={nodes.Icosphere003.geometry} material={textureMaterial} position={[0.044, 0.696, -0.077]} rotation={[-Math.PI / 2, 0, 0]} />
      </group>
      <group name="Empty" position={[-0.977, 0.536, -0.151]}>
        <mesh name="Cube001" geometry={nodes.Cube001.geometry} material={textureMaterial} position={[1.72, -0.536, -0.067]} />
        <group name="Cube004" position={[0.169, -0.21, 0.042]}>
          <mesh name="Cube004-Mesh" geometry={nodes['Cube004-Mesh'].geometry} material={textureMaterial} />
          <mesh name="Cube004-Mesh_1" geometry={nodes['Cube004-Mesh_1'].geometry} material={textureMaterial} />
          <mesh name="Cube004-Mesh_2" geometry={nodes['Cube004-Mesh_2'].geometry} material={textureMaterial} />
        </group>
        <group name="Cube006" position={[0.426, -0.323, 0.332]}>
          <mesh name="Cube006-Mesh" geometry={nodes['Cube006-Mesh'].geometry} material={textureMaterial} />
          <mesh name="Cube006-Mesh_1" geometry={nodes['Cube006-Mesh_1'].geometry} material={textureMaterial} />
        </group>
        <group name="Cylinder" position={[0.081, 0.008, 0.202]}>
          <mesh name="Cylinder-Mesh" geometry={nodes['Cylinder-Mesh'].geometry} material={textureMaterial} />
          <mesh name="Cylinder-Mesh_1" geometry={nodes['Cylinder-Mesh_1'].geometry} material={textureMaterial} />
          <mesh name="Cylinder-Mesh_2" geometry={nodes['Cylinder-Mesh_2'].geometry} material={textureMaterial} />
        </group>
        <mesh name="Cylinder001" geometry={nodes.Cylinder001.geometry} material={textureMaterial} position={[-0.158, 0.004, -0.23]} />
        <group name="Laptop_Cube010" position={[-0.171, 0.067, 0.142]}>
          <mesh name="Laptop_Cube010-Mesh" geometry={nodes['Laptop_Cube010-Mesh'].geometry} material={textureMaterial} />
          <mesh name="Laptop_Cube010-Mesh_1" geometry={nodes['Laptop_Cube010-Mesh_1'].geometry} material={textureMaterial} />
          <mesh name="Laptop_Cube010-Mesh_2" geometry={nodes['Laptop_Cube010-Mesh_2'].geometry} material={textureMaterial} />
        </group>
      </group>
      <mesh name="rubber_duck_toy" geometry={nodes.rubber_duck_toy.geometry} material={textureMaterial} position={[-0.954, 0, -1]} rotation={[-Math.PI, 0.913, -Math.PI]} />
      <mesh name="Plane-Mesh" geometry={nodes['Plane-Mesh'].geometry} material={textureMaterial} />
      <mesh name="Plane-Mesh_1" geometry={nodes['Plane-Mesh_1'].geometry} material={textureMaterial} />
    </group>
  )
}

useGLTF.preload('/baked.gltf')
